plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'maven-publish'
	id "com.diffplug.spotless" version "5.12.5"
}

apply plugin: 'pmd'

ext.configFile = file('build.properties')
ext.config = configFile.withReader {
	def prop = new Properties()
	prop.load(it)
	return (new ConfigSlurper().parse(prop))
}

def mc_version = '1.17'
version = "${mc_version}-${config.build_number}-FABRIC"
if (System.getenv().RELEASE_MODE == null) {
    version += '-SNAPSHOT'
}

group = "vazkii.${config.mod_id}"
archivesBaseName = "${config.mod_name}"

minecraft {
}

spotless {
	enforceCheck = false // workaround around jenkins having wrong line endings in some files
	// we explicitly check in github actions builds
	java {
		indentWithTabs()
		eclipse().configFile 'spotless/eclipseformat.xml'
		removeUnusedImports()
		importOrderFile 'spotless/eclipse.importorder'
	}
}

pmd {
	toolVersion '6.35.0'
	incrementalAnalysis.set(true)
	ruleSets.clear()
	ruleSetFiles = files("spotless/pmd-ruleset.xml")
}

task checkSyntax {
	dependsOn spotlessJavaCheck, pmdMain
}

repositories {
	maven {
		name = "Modmuss"
		url = "https://maven.modmuss50.me/"
	}
}

dependencies {
	modImplementation "com.google.code.findbugs:jsr305:3.0.2"
	modImplementation "me.zeroeightsix:fiber:0.23.0-2"
	include "me.zeroeightsix:fiber:0.23.0-2"

	minecraft "com.mojang:minecraft:1.17"
	mappings "net.fabricmc:yarn:1.17+build.5:v2"
	modImplementation "net.fabricmc:fabric-loader:0.11.3"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:0.34.8+1.17"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.1'
}

test {
    useJUnitPlatform()
}

processResources {
	inputs.property "version", project.version

	// We don't actually copy duplicate files below but Gradle is dumb and thinks we do
	// Suppress the error and warning by telling it to "overwrite"
	duplicatesStrategy DuplicatesStrategy.INCLUDE

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}

	from(sourceSets.test.resources.srcDirs)
}

task incrementBuildNumber {
	doFirst {
		config.build_number = (config.build_number.toString().toInteger()) + 1
		configFile.withWriter {
			config.toProperties().store(it, "")
		}
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"

	exclude "**/*.bat"
	exclude "**/*.psd"
	exclude "**/*.exe"
	exclude "**/unused"

	// exclude test data
	exclude "**/data/patchouli/patchouli_books/**"
	exclude "**/data/patchouli/advancements/**"
	exclude "**/data/patchouli/recipes/**"
}

task apiJar(type: Jar, dependsOn: classes) {
	from(sourceSets.main.output)
	include 'vazkii/patchouli/api/**'

	classifier = "api"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			artifact(apiJar) {
				builtBy apiJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		maven {
			url "file://" + System.getenv("local_maven")
		}
	}
}
