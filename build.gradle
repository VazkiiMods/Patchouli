buildscript {
    repositories {
        maven {
            name "Forge"
            url "https://files.minecraftforge.net/maven"
        }
        maven {
            name "Sponge"
            url "https://repo.spongepowered.org/repository/maven-public/"
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
	id "com.diffplug.spotless" version "5.12.5"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'pmd'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "patchouli.refmap.json"
    config 'patchouli.mixins.json'
    dumpTargetOnFailure true
}

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

def mc_version = '1.17.1'
version = "${mc_version}-${config.build_number}"
if (System.getenv().RELEASE_MODE == null) {
    version += '-SNAPSHOT'
}

group = "vazkii.${config.mod_id}"
archivesBaseName = "${config.mod_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(16)
spotless {
	enforceCheck = false // workaround around jenkins having wrong line endings in some files
	// we explicitly check in github actions builds
	java {
		indentWithTabs()
		eclipse().configFile 'spotless/eclipseformat.xml'
		removeUnusedImports()
		importOrderFile 'spotless/eclipse.importorder'
	}
}

pmd {
	toolVersion '6.35.0'
	incrementalAnalysis.set(true)
	ruleSets.clear()
	ruleSetFiles = files("spotless/pmd-ruleset.xml")
}

minecraft {
    mappings channel: 'official', version: mc_version

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            mods {
                patchouli {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            mods {
                patchouli {
                    source sourceSets.main
                }
            }
        }
    }
}
repositories {
    maven {
        name = "JEI"
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "Sponge"
        url "https://repo.spongepowered.org/repository/maven-public/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-37.0.90"
    if (!Boolean.getBoolean('idea.sync.active')) {
        annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
    }

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:8.0.0.16:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:8.0.0.16")

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.1'
}

test {
    useJUnitPlatform()
}

processResources {
    inputs.property "version", project.version

    filesMatching("mods.toml") {
        expand "version": project.version
    }
}

task incrementBuildNumber {
    doFirst {
        config.build_number = (config.build_number.toString().toInteger()) + 1
        configFile.withWriter {
            config.toProperties().store(it, "")
        }
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

task checkSyntax {
    dependsOn spotlessJavaCheck, pmdMain
}

jar {
    manifest {
        attributes([
            "Specification-Title": "${config.mod_id}",
            "Specification-Vendor": "vazkii",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "${config.mod_id}",
            "Implementation-Version": "${archiveVersion.get()}",
            "Implementation-Vendor" :"vazkii"
        ])
    }

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"
    
    // exclude test data
    exclude "**/data/patchouli/patchouli_books/**"
    exclude "**/data/patchouli/advancements/**"
	exclude "**/data/patchouli/recipes/**"
    exclude "**/assets/patchouli/models/item/test_book.json"
}

jar.finalizedBy('reobfJar')

task srcJar (type: Jar) {
    from sourceSets.main.java
    archiveClassifier.set 'sources'
}

task apiJar(type: Jar) {
    // Sources included because of MinecraftForge/ForgeGradle#369
    from(sourceSets.main.allJava)
    from(sourceSets.main.output)
    include 'vazkii/patchouli/api/**'

    archiveClassifier.set 'api'
}

artifacts {
    archives srcJar, apiJar
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    tasks.publish.dependsOn build
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifact srcJar
            artifact apiJar
            pom.withXml {
                def node = asNode()
                if(node.dependencies.size() > 0)
                    node.remove(node.dependencies) // Remove deps, as they are all mappings-dependent and/or forge
            }
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

defaultTasks 'clean', 'build'
